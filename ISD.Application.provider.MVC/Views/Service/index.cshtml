@model ISD.Application.provider.MVC.Models.ServiceDetailModel
@{
    ViewBag.Title = @Model.Name + " | Service Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Requirements = new ISD.Data.EDM.ISDEntities().Requirements;
}
<div class="breadcrumbs">
    <div class="container">
        <h1 class="pull-left">@Html.DisplayFor(model => model.Name)</h1>
        <ul class="pull-right breadcrumb">
            <li><a href="index.html">Home</a></li>
            <li><a href="">Service</a></li>
            <li class="active">@Html.DisplayFor(model => model.Name)</li>
        </ul>
    </div><!--/container-->
</div>
<div class="container content">
    <p class="text-right">
        @Html.ActionLink("Edit", "Edit", new { id = Model.ID }) |
        @Html.ActionLink("Back to List", "", "Services")
    </p>
    <div class="row portfolio-item margin-bottom-25">
        <!-- Content Info -->
        @{

            if (Model.Images.Any())
            {
                <div class="col-md-6 md-margin-bottom-40">
                    <p>@Html.DisplayFor(model => model.FullDescription)</p>

                    <div class="row">
                        <div class="col-md-6">
                            <h2 class="heading-sm">Eligibility</h2>
                            <dl>

                                @{
                if (@Model.Eligibility ?? false)
                {
                    if (!string.IsNullOrEmpty(Model.Requirements))
                    {
                        <dt>Requirement</dt>
                                    <dd>
                                        <ul>
                                            @{
                        var reqArr = Model.Requirements.Split('&');
                        foreach (var req in reqArr)
                        {
                            <li>
                                @{
                            var orReqs = req.ToCharArray();
                            System.Text.StringBuilder sb = new System.Text.StringBuilder();
                            foreach (var orReq in orReqs)
                            {
                                if (Char.IsSymbol(orReq))
                                {
                                    if (orReq == '|')
                                    { sb.Append(" or "); }
                                    if (orReq == '&')
                                    { sb.Append(" and "); }
                                }
                                if (Char.IsDigit(orReq))
                                {
                                    int id = Convert.ToInt32(Char.GetNumericValue(orReq));
                                    var sReq = Requirements.Where(x => x.ID == id).FirstOrDefault();
                                    sb.Append(sReq.Text);
                                }
                            }
                            <span>@sb.ToString()</span>
                                }
                            </li>
                        }
                                            }
                                        </ul>
                                    </dd>
                    }
                }
                else
                {
                    <dd>No requirement for this service. Please see note for more details</dd>
                }
                                }

                                @{
                if (!string.IsNullOrEmpty(@Model.Note))
                {
                    <dt> Note </dt>
                                    <dd>@Model.Note</dd>
                }
                if (!string.IsNullOrEmpty(@Model.Assessment))
                {
                    <dt>Assessment</dt>
                                    <dd>@Model.Assessment</dd>
                }
                                }

                            </dl>
                        </div>
                        <div class="col-md-6">
                            @{if (!string.IsNullOrEmpty(@Model.Price))
                            {
                                <h2 class="heading-sm">Pricing</h2>

                                <dd class="margin-bottom-5">@Model.Price</dd>
                            }
                            }
                            <h2 class="heading-sm">Address</h2>
                            <address>
                                <strong>@Html.DisplayFor(model => model.ProviderName)</strong><br>
                                @Html.DisplayFor(model => model.Address)<br>
                                @Html.DisplayFor(model => model.Suburb), @Model.StateName @Model.PostCode<br>
                                <abbr title="Phone">P:</abbr> @Html.DisplayFor(model => model.PhoneNumber)
                            </address>
                            @{if (!string.IsNullOrEmpty(Model.Website))
                            {
                                <address>
                                    <strong>Our site</strong><br>
                                    <a href="http://@Model.Website">@Model.Website</a>
                                </address>
                            }
                            }
                        </div>
                    </div>
                    <!--/row-->

                </div>
                @Html.Partial("_PartialServiceImageView", Model.Images)
            }
            else
            {
                <div class="col-md-12 md-margin-bottom-40">
                    <p>@Html.DisplayFor(model => model.FullDescription)</p>

                    <div class="row">
                        <div class="col-md-6">
                            <h2 class="heading-sm">Eligibility</h2>
                            <dl>

                                @{
                if (@Model.Eligibility ?? false)
                {
                    if (!string.IsNullOrEmpty(Model.Requirements))
                    {
                        <dt>Requirement</dt>
                                    <dd>
                                        <ul>
                                            @{
                        var reqArr = Model.Requirements.Split('&');
                        foreach (var req in reqArr)
                        {
                            <li>
                                @{
                            var orReqs = req.ToCharArray();
                            System.Text.StringBuilder sb = new System.Text.StringBuilder();
                            foreach (var orReq in orReqs)
                            {
                                if (Char.IsSymbol(orReq))
                                {
                                    if (orReq == '|')
                                    { sb.Append(" or "); }
                                    if (orReq == '&')
                                    { sb.Append(" and "); }
                                }
                                if (Char.IsDigit(orReq))
                                {
                                    int id = Convert.ToInt32(Char.GetNumericValue(orReq));
                                    var sReq = Requirements.Where(x => x.ID == id).FirstOrDefault();
                                    sb.Append(sReq.Text);
                                }
                            }
                            <span>@sb.ToString()</span>
                                }
                            </li>
                        }
                                            }
                                        </ul>
                                    </dd>
                    }
                }
                else
                {
                    <dd>No requirement for this service. Please see note for more details</dd>
                }
                                }

                                @{
                if (!string.IsNullOrEmpty(@Model.Note))
                {
                    <dt> Note </dt>
                                    <dd>@Model.Note</dd>
                }
                if (!string.IsNullOrEmpty(@Model.Assessment))
                {
                    <dt>Assessment</dt>
                                    <dd>@Model.Assessment</dd>
                }
                                }

                            </dl>
                        </div>
                        <div class="col-md-6">
                            @{if (!string.IsNullOrEmpty(@Model.Price))
                            {
                                <h2 class="heading-sm">Pricing</h2>

                                <dd class="margin-bottom-5">@Model.Price</dd>
                            }
                            }
                            <h2 class="heading-sm">Address</h2>
                            <address>
                                <strong>@Html.DisplayFor(model => model.ProviderName)</strong><br>
                                @Html.DisplayFor(model => model.Address)<br>
                                @Html.DisplayFor(model => model.Suburb), @Model.StateName @Model.PostCode<br>
                                <abbr title="Phone">P:</abbr> @Html.DisplayFor(model => model.PhoneNumber)
                            </address>
                            @{if (!string.IsNullOrEmpty(Model.Website))
                            {
                                <address>
                                    <strong>Our site</strong><br>
                                    <a href="http://@Model.Website">@Model.Website</a>
                                </address>
                            }
                            }
                        </div>
                    </div>
                </div>
            }
}




        <div class="col-md-12">
            @Html.Partial("_PartialServiceClinicians", Model.Clinicians)

        </div>

    </div><!--/row-->
    <p class="text-right">
        @Html.ActionLink("Edit Primary", "Edit", new { id = Model.ID }) |
        @Html.ActionLink("Back to List", "", "Services")
    </p>
    <div class="margin-bottom-20 clearfix"></div>
</div>
